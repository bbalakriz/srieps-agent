from robusta.api import *
import requests
import os
import re

# SREIPS Agent API endpoint - externalized
SREIPS_AGENT_URL = os.getenv("SREIPS_AGENT_URL", "http://sreips-agent.sreips-agent.svc.cluster.local:8000")

# Prompt mapping based on common Kubernetes failure reasons
PROMPT_MAPPINGS = {
    "CrashLoopBackOff": "what is the resolution for pod crashloop backoff issues in kubernetes?",
    "ImagePullBackOff": "what is the resolution for image pull backoff issues in kubernetes?",
    "ErrImagePull": "what is the resolution for image pull errors in kubernetes?",
    "CreateContainerConfigError": "what is the resolution for container configuration errors in kubernetes?",
    "InvalidImageName": "what is the resolution for invalid image name errors in kubernetes?",
    "CreateContainerError": "what is the resolution for container creation errors in kubernetes?",
    "RunContainerError": "what is the resolution for run container errors in kubernetes?",
    "OOMKilled": "what is the resolution for out of memory killed pods in kubernetes?",
    "Evicted": "what is the resolution for evicted pods in kubernetes?",
    "FailedScheduling": "what is the resolution for failed pod scheduling in kubernetes?",
    "NodeNotReady": "what is the resolution for node not ready issues in kubernetes?",
    "NetworkNotReady": "what is the resolution for network not ready issues in kubernetes?",
    "PersistentVolumeClaimNotBound": "what is the resolution for PVC not bound issues in kubernetes?",
    "VolumeAttachFailed": "what is the resolution for volume attachment failures in kubernetes?",
}

def extract_failure_reason(pod, pod_logs: str) -> str:
    """
    Extract the failure reason from pod status and logs
    Returns a string describing the failure
    
    Based on Robusta's PodEvent structure:
    - pod.status.containerStatuses (camelCase)
    - container_status.state.waiting.reason
    - container_status.state.terminated.reason
    
    Reference: https://github.com/robusta-dev/robusta/blob/master/src/robusta/integrations/kubernetes/autogenerated/events.py
    """
    try:
        # Check container statuses (Robusta uses camelCase: containerStatuses)
        if pod.status and hasattr(pod.status, 'containerStatuses') and pod.status.containerStatuses:
            for container_status in pod.status.containerStatuses:
                # Check waiting state first (more common for ongoing issues)
                if (container_status.state and 
                    container_status.state.waiting and 
                    container_status.state.waiting.reason):
                    reason = container_status.state.waiting.reason
                    if reason in PROMPT_MAPPINGS:
                        return reason
                
                # Check terminated state
                if (container_status.state and 
                    container_status.state.terminated and 
                    container_status.state.terminated.reason):
                    reason = container_status.state.terminated.reason
                    if reason in PROMPT_MAPPINGS:
                        return reason
        
        # Check pod conditions as fallback
        if pod.status and hasattr(pod.status, 'conditions') and pod.status.conditions:
            for condition in pod.status.conditions:
                if (hasattr(condition, 'status') and 
                    hasattr(condition, 'reason') and
                    condition.status == "False" and 
                    condition.reason and
                    condition.reason in PROMPT_MAPPINGS):
                    return condition.reason
                    
    except AttributeError as e:
        # Log the specific attribute error for debugging
        print(f"AttributeError while parsing pod status: {e}")
    except Exception as e:
        # Catch any other unexpected errors
        print(f"Unexpected error parsing pod status: {e}")
    
    # Parse logs for common error patterns as final fallback
    if pod_logs:
        log_lower = pod_logs.lower()
        if "out of memory" in log_lower or "oom" in log_lower:
            return "OOMKilled"
        elif "image pull" in log_lower or "imagepullbackoff" in log_lower:
            return "ImagePullBackOff"
        elif "crashloopbackoff" in log_lower or "crash loop" in log_lower:
            return "CrashLoopBackOff"
        elif "evicted" in log_lower:
            return "Evicted"
    
    # Default to CrashLoopBackOff if we can't determine
    return "CrashLoopBackOff"

def query_sreips_agent(query: str) -> dict:
    """
    Call the SREIPS Agent API with the given query
    Returns the combined results or error message
    """
    try:
        response = requests.post(
            f"{SREIPS_AGENT_URL}/query",
            json={"query": query},
            timeout=600
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.Timeout:
        return {"combined_results": "Error: Request to SREIPS Agent timed out"}
    except requests.exceptions.ConnectionError:
        return {"combined_results": f"Error: Could not connect to SREIPS Agent at {SREIPS_AGENT_URL}"}
    except Exception as e:
        return {"combined_results": f"Error querying SREIPS Agent: {str(e)}"}

def convert_markdown_to_slack(text: str) -> str:
    """
    Convert standard markdown to Slack-compatible markdown
    - **bold** ‚Üí *bold* (Slack uses single asterisks for bold)
    - Keep bullets and numbered lists as-is
    - Preserve code blocks with backticks
    """
    # Convert double asterisks (standard markdown bold) to single asterisks (Slack bold)
    text = re.sub(r'\*\*([^\*]+)\*\*', r'*\1*', text)
    
    # Ensure proper spacing around bullets for better readability
    text = re.sub(r'^\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    
    return text

def parse_combined_results(combined_results: str) -> tuple:
    """
    Parse the combined results from SREIPS Agent into RAG and MCP sections
    Returns (rag_results, mcp_results) tuple, both converted to Slack markdown
    """
    try:
        # Split by section headers
        if "=== RAG Results ===" in combined_results and "=== MCP Results ===" in combined_results:
            parts = combined_results.split("=== MCP Results ===")
            rag_part = parts[0].replace("=== RAG Results ===", "").strip()
            mcp_part = parts[1].strip() if len(parts) > 1 else ""
            
            # Convert to Slack markdown format
            rag_part = convert_markdown_to_slack(rag_part)
            mcp_part = convert_markdown_to_slack(mcp_part)
            
            return rag_part, mcp_part
        else:
            # If no sections found, return all as RAG results
            converted = convert_markdown_to_slack(combined_results)
            return converted, ""
    except Exception as e:
        print(f"Error parsing combined results: {e}")
        return combined_results, ""

@action
def lls_agent_action(event: PodEvent):
    # we have full access to the pod on which the alert fired
    pod = event.get_pod()
    pod_name = pod.metadata.name
    pod_namespace = pod.metadata.namespace
    pod_logs = pod.get_logs()
    
    # Extract failure reason from pod status and logs
    failure_reason = extract_failure_reason(pod, pod_logs)
    
    # Get the appropriate prompt
    prompt = PROMPT_MAPPINGS.get(failure_reason, PROMPT_MAPPINGS["CrashLoopBackOff"])
    
    # Query the SREIPS Agent
    results = query_sreips_agent(prompt)
    combined_results = results.get("combined_results", "No results returned from SREIPS Agent")
    
    # Parse the results into separate sections
    rag_results, mcp_results = parse_combined_results(combined_results)
    
    # Build enrichment blocks
    enrichment_blocks = [
        MarkdownBlock(f"*üö® Alert:* Pod `{pod_name}` in namespace `{pod_namespace}` is experiencing issues"),
        MarkdownBlock(f"*üîç Detected Issue:* `{failure_reason}`"),
        DividerBlock(),
    ]
    
    # Add RAG results if available
    if rag_results:
        enrichment_blocks.append(
            MarkdownBlock(f"*üìö Knowledge Base Resolution:*\n{rag_results}")
        )
        enrichment_blocks.append(DividerBlock())
    
    # Add MCP results if available
    if mcp_results:
        enrichment_blocks.append(
            MarkdownBlock(f"*üîó Red Hat KCS Articles:*\n{mcp_results}")
        )
    
    # Send enrichment to destinations
    event.add_enrichment(enrichment_blocks)